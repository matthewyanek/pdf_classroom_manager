import React, { useState, useEffect } from 'react';
import AiTagButton from './AiTagButton';

interface PDFViewerProps {
  pdfUrl: string;
  filename: string;
  onClose: () => void;
  onTagsGenerated?: (tags: string[]) => void;
}

const PDFViewer: React.FC<PDFViewerProps> = ({ 
  pdfUrl, 
  filename, 
  onClose,
  onTagsGenerated 
}) => {
  const [loading, setLoading] = useState(true);
  const [pdfObjectUrl, setPdfObjectUrl] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [tags, setTags] = useState<string[]>([]);
  const [searchText, setSearchText] = useState('');
  const [searchResults, setSearchResults] = useState<number>(0);
  const [currentPage, setCurrentPage] = useState(1);

  // Fetch the PDF as a blob and create an object URL
  useEffect(() => {
    const fetchPdf = async () => {
      try {
        setLoading(true);
        console.log('Fetching PDF from:', pdfUrl);
        const response = await fetch(pdfUrl);
        
        if (!response.ok) {
          throw new Error(`Failed to fetch PDF: ${response.status} ${response.statusText}`);
        }
        
        const blob = await response.blob();
        console.log('PDF blob created, size:', blob.size);
        const objectUrl = URL.createObjectURL(blob);
        setPdfObjectUrl(objectUrl);
        setLoading(false);
      } catch (err) {
        console.error('Error fetching PDF:', err);
        setError(err instanceof Error ? err.message : 'Failed to load PDF');
        setLoading(false);
      }
    };
    
    fetchPdf();
    
    // Clean up object URL when component unmounts
    return () => {
      if (pdfObjectUrl) {
        URL.revokeObjectURL(pdfObjectUrl);
      }
    };
  }, [pdfUrl]);

  // Handle tags generated by AI
  const handleTagsGenerated = (newTags: string[]) => {
    setTags(newTags);
    if (onTagsGenerated) {
      onTagsGenerated(newTags);
    }
  };

  // Handle search in PDF
  const handleSearch = () => {
    if (!searchText.trim() || !pdfObjectUrl) return;
    
    const iframe = document.querySelector('iframe');
    if (!iframe || !iframe.contentWindow) return;
    
    // Access the PDF.js viewer in the iframe
    const viewer = iframe.contentWindow as any;
    
    // Check if PDF.js is loaded
    if (viewer.PDFViewerApplication) {
      const { pdfViewer, findController } = viewer.PDFViewerApplication;
      
      // Configure search parameters
      findController.executeCommand('find', {
        caseSensitive: false,
        findPrevious: false,
        highlightAll: true,
        phraseSearch: true,
        query: searchText,
      });
      
      // Update search results count
      setTimeout(() => {
        if (findController.matchCount !== null) {
          setSearchResults(findController.matchCount);
        }
      }, 100);
    }
  };

  // Handle key press for search
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
      <div className="bg-gray-800 rounded-lg shadow-xl flex flex-col w-11/12 h-5/6 max-w-6xl">
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-gray-700">
          <h2 className="text-xl font-semibold text-white truncate">{filename}</h2>
          <div className="flex space-x-3">
            {/* AI Tag Button */}
            {onTagsGenerated && (
              <AiTagButton 
                pdfUrl={pdfUrl} 
                onTagsGenerated={handleTagsGenerated} 
              />
            )}
            
            <a
              href={pdfUrl}
              download={filename}
              className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center"
            >
              <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
              </svg>
              Download
            </a>
            <button
              onClick={onClose}
              className="px-3 py-1 bg-gray-700 text-gray-300 rounded-md hover:bg-gray-600 flex items-center"
            >
              <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
              Close
            </button>
          </div>
        </div>
        
        {/* Search and Tags Bar */}
        <div className="flex flex-wrap items-center justify-between px-4 py-2 border-b border-gray-700 bg-gray-800">
          {/* Search Input */}
          <div className="flex items-center space-x-2">
            <div className="relative">
              <input
                type="text"
                value={searchText}
                onChange={(e) => setSearchText(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Search in PDF..."
                className="px-3 py-1 pl-8 bg-gray-700 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <svg 
                className="w-4 h-4 absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-400" 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24" 
                xmlns="http://www.w3.org/2000/svg"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <button
              onClick={handleSearch}
              className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              Search
            </button>
            {searchResults > 0 && (
              <span className="text-gray-300 text-sm">
                {searchResults} {searchResults === 1 ? 'result' : 'results'}
              </span>
            )}
          </div>
          
          {/* Tags Display */}
          {tags.length > 0 && (
            <div className="flex items-center space-x-2 mt-2 sm:mt-0">
              <span className="text-gray-300">Tags:</span>
              <div className="flex flex-wrap gap-2">
                {tags.map((tag) => (
                  <span 
                    key={tag} 
                    className="bg-blue-900 text-blue-100 px-2 py-1 rounded-md text-sm"
                  >
                    {tag}
                  </span>
                ))}
              </div>
            </div>
          )}
        </div>
        
        {/* PDF Viewer */}
        <div className="flex-1 bg-gray-900 relative">
          {loading && (
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
            </div>
          )}
          
          {error ? (
            <div className="absolute inset-0 flex flex-col items-center justify-center text-white">
              <svg className="w-16 h-16 text-red-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <p className="text-xl mb-2">Error Loading PDF</p>
              <p className="text-gray-400 text-center max-w-md">{error}</p>
              <p className="mt-4 text-sm text-gray-500">Try downloading the file instead.</p>
            </div>
          ) : (
            pdfObjectUrl && (
              <iframe 
                src={pdfObjectUrl} 
                className="w-full h-full" 
                title={filename}
              />
            )
          )}
        </div>
      </div>
    </div>
  );
};

export default PDFViewer;