// src/components/pdf/PDFViewer.tsx
import React, { useState, useEffect } from 'react';
import axios from 'axios';

interface PDFViewerProps {
  pdfUrl: string;
  filename: string;
  onClose: () => void;
  onTagsGenerated?: (tags: string[]) => void;
}

const PDFViewer: React.FC<PDFViewerProps> = ({ 
  pdfUrl, 
  filename, 
  onClose,
  onTagsGenerated 
}) => {
  const [loading, setLoading] = useState(true);
  const [pdfObjectUrl, setPdfObjectUrl] = useState<string | null>(null);
  const [error, setError] = useState<string | null>(null);
  const [tags, setTags] = useState<string[]>([]);
  const [searchText, setSearchText] = useState('');
  const [searchResults, setSearchResults] = useState<number>(0);
  const [isGeneratingTags, setIsGeneratingTags] = useState(false);
  const [tagError, setTagError] = useState<string | null>(null);

  // Extract PDF ID from the URL - improved version
  const extractPdfId = (): number | null => {
    try {
      // Log the full URL for debugging
      console.log('PDF URL:', pdfUrl);
      
      // Extract ID using regex
      const match = pdfUrl.match(/\/pdfs\/(\d+)\/view/);
      if (match && match[1]) {
        const id = parseInt(match[1], 10);
        console.log('Extracted PDF ID:', id);
        return id;
      }
      
      // Alternative method: split the URL
      const parts = pdfUrl.split('/');
      const idIndex = parts.indexOf('pdfs') + 1;
      if (idIndex > 0 && idIndex < parts.length) {
        const id = parseInt(parts[idIndex], 10);
        if (!isNaN(id)) {
          console.log('Extracted PDF ID (alternative method):', id);
          return id;
        }
      }
      
      console.error('Failed to extract PDF ID from URL:', pdfUrl);
      return null;
    } catch (err) {
      console.error('Error extracting PDF ID:', err);
      return null;
    }
  };

  // Fetch the PDF as a blob and create an object URL
  useEffect(() => {
    const fetchPdf = async () => {
      try {
        setLoading(true);
        console.log('Fetching PDF from:', pdfUrl);
        const response = await fetch(pdfUrl);
        
        if (!response.ok) {
          throw new Error(`Failed to fetch PDF: ${response.status} ${response.statusText}`);
        }
        
        const blob = await response.blob();
        console.log('PDF blob created, size:', blob.size);
        const objectUrl = URL.createObjectURL(blob);
        setPdfObjectUrl(objectUrl);
        setLoading(false);
      } catch (err) {
        console.error('Error fetching PDF:', err);
        setError(err instanceof Error ? err.message : 'Failed to load PDF');
        setLoading(false);
      }
    };
    
    fetchPdf();
    
    // Clean up object URL when component unmounts
    return () => {
      if (pdfObjectUrl) {
        URL.revokeObjectURL(pdfObjectUrl);
      }
    };
  }, [pdfUrl]);

  // Fallback function to generate tags from filename
  const generateTagsFromFilename = (filename: string): string[] => {
    // Remove file extension
    const nameWithoutExtension = filename.replace(/\.[^/.]+$/, "");
    
    // Split by common separators and convert to lowercase
    const words = nameWithoutExtension.split(/[-_.\s]+/).map(word => word.toLowerCase());
    
    // Filter out short words and numbers
    const stopWords = ['the', 'and', 'a', 'to', 'of', 'in', 'is', 'it', 'pdf', 'doc', 'file'];
    const validWords = words.filter(word => 
      word.length > 2 && !stopWords.includes(word) && !/^\d+$/.test(word)
    );
    
    // Return up to 5 unique tags
    return Array.from(new Set(validWords)).slice(0, 5);
  };

  // Handle tags generated by AI
  const handleGenerateTags = async () => {
    const pdfId = extractPdfId();
    
    if (!pdfId) {
      setTagError("Cannot determine PDF ID from URL. Please try again.");
      return;
    }

    setIsGeneratingTags(true);
    setTagError(null);
    
    try {
      console.log('Generating tags for PDF ID:', pdfId);
      
      const response = await axios.post('/api/tags/generate', { 
        pdf_id: pdfId,
        // Add filename as a hint for fallback tag generation
        filename: filename
      });
      
      console.log('Tag generation response:', response.data);
      
      if (response.data && response.data.tags) {
        const newTags = response.data.tags;
        
        if (newTags.length === 0) {
          // If server returned empty tags, try to generate some from the filename
          const filenameBasedTags = generateTagsFromFilename(filename);
          
          if (filenameBasedTags.length > 0) {
            setTags(filenameBasedTags);
            
            if (onTagsGenerated) {
              onTagsGenerated(filenameBasedTags);
            }
            return;
          }
          
          setTagError('No meaningful tags could be extracted from this PDF. Try a document with more text content.');
          return;
        }
        
        setTags(newTags);
        
        if (onTagsGenerated) {
          onTagsGenerated(newTags);
        }
      } else {
        setTagError('No tags were generated');
        console.error('No tags in response:', response.data);
      }
    } catch (error) {
      console.error('Error generating tags:', error);
      
      // Try to generate tags from filename as fallback
      const filenameBasedTags = generateTagsFromFilename(filename);
      
      if (filenameBasedTags.length > 0) {
        setTags(filenameBasedTags);
        
        if (onTagsGenerated) {
          onTagsGenerated(filenameBasedTags);
        }
        return;
      }
      
      // More detailed error logging
      if (axios.isAxiosError(error)) {
        if (error.response) {
          console.error('Response status:', error.response.status);
          console.error('Response data:', error.response.data);
          
          // Show more specific error message based on status code
          if (error.response.status === 404) {
            setTagError('PDF file not found on the server');
          } else if (error.response.status === 400) {
            setTagError('Error: ' + (error.response.data?.detail || error.response.data?.error || 'Bad request'));
          } else if (error.response.status === 500) {
            setTagError('Server error: ' + (error.response.data?.detail || 'Unknown error'));
          } else {
            setTagError(error.response.data?.detail || error.response.data?.error || 'Failed to generate tags');
          }
        } else if (error.request) {
          // Request was made but no response received
          console.error('No response received:', error.request);
          setTagError('No response from server. Check your connection.');
        } else {
          // Error in setting up the request
          setTagError('Error setting up request: ' + error.message);
        }
      } else {
        setTagError('Failed to generate tags: ' + (error instanceof Error ? error.message : 'Unknown error'));
      }
    } finally {
      setIsGeneratingTags(false);
    }
  };

  // Handle search in PDF
  const handleSearch = () => {
    if (!searchText.trim() || !pdfObjectUrl) return;
    
    const iframe = document.querySelector('iframe');
    if (!iframe || !iframe.contentWindow) return;
    
    // Access the PDF.js viewer in the iframe
    const viewer = iframe.contentWindow as any;
    
    // Check if PDF.js is loaded
    if (viewer.PDFViewerApplication) {
      const { pdfViewer, findController } = viewer.PDFViewerApplication;
      
      // Configure search parameters
      findController.executeCommand('find', {
        caseSensitive: false,
        findPrevious: false,
        highlightAll: true,
        phraseSearch: true,
        query: searchText,
      });
      
      // Update search results count
      setTimeout(() => {
        if (findController.matchCount !== null) {
          setSearchResults(findController.matchCount);
        }
      }, 100);
    }
  };

  // Handle key press for search
  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter') {
      handleSearch();
    }
  };

  return (
    <div className="fixed inset-0 bg-black bg-opacity-75 flex items-center justify-center z-50">
      <div className="bg-gray-800 rounded-lg shadow-xl flex flex-col w-11/12 h-5/6 max-w-6xl">
        {/* Header */}
        <div className="flex items-center justify-between p-4 border-b border-gray-700">
          <h2 className="text-xl font-semibold text-white truncate">{filename}</h2>
          <div className="flex space-x-3">
            {/* AI Tag Button */}
            <button
              onClick={handleGenerateTags}
              disabled={isGeneratingTags}
              className={`px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center ${
                isGeneratingTags ? 'opacity-70 cursor-not-allowed' : ''
              }`}
            >
              {isGeneratingTags ? (
                <>
                  <svg className="animate-spin -ml-1 mr-2 h-4 w-4 text-white" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                    <circle className="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" strokeWidth="4"></circle>
                    <path className="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                  </svg>
                  Generating Tags...
                </>
              ) : (
                <>
                  <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 7h.01M7 3h5c.512 0 1.024.195 1.414.586l7 7a2 2 0 010 2.828l-7 7a2 2 0 01-2.828 0l-7-7A1.994 1.994 0 013 12V7a4 4 0 014-4z" />
                  </svg>
                  Auto-Generate Tags
                </>
              )}
            </button>
            
            <a
              href={pdfUrl}
              download={filename}
              className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700 flex items-center"
            >
              <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
              </svg>
              Download
            </a>
            <button
              onClick={onClose}
              className="px-3 py-1 bg-gray-700 text-gray-300 rounded-md hover:bg-gray-600 flex items-center"
            >
              <svg className="w-4 h-4 mr-1" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M6 18L18 6M6 6l12 12" />
              </svg>
              Close
            </button>
          </div>
        </div>
        
        {/* Search and Tags Bar */}
        <div className="flex flex-wrap items-center justify-between px-4 py-2 border-b border-gray-700 bg-gray-800">
          {/* Search Input */}
          <div className="flex items-center space-x-2">
            <div className="relative">
              <input
                type="text"
                value={searchText}
                onChange={(e) => setSearchText(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Search in PDF..."
                className="px-3 py-1 pl-8 bg-gray-700 text-white rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
              />
              <svg 
                className="w-4 h-4 absolute left-2 top-1/2 transform -translate-y-1/2 text-gray-400" 
                fill="none" 
                stroke="currentColor" 
                viewBox="0 0 24 24" 
                xmlns="http://www.w3.org/2000/svg"
              >
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
              </svg>
            </div>
            <button
              onClick={handleSearch}
              className="px-3 py-1 bg-blue-600 text-white rounded-md hover:bg-blue-700"
            >
              Search
            </button>
            {searchResults > 0 && (
              <span className="text-gray-300 text-sm">
                {searchResults} {searchResults === 1 ? 'result' : 'results'}
              </span>
            )}
          </div>
          
          {/* Tags Display */}
          <div className="flex items-center space-x-2 mt-2 sm:mt-0">
            {tagError && (
              <span className="text-red-400 text-sm">{tagError}</span>
            )}
            
            {tags.length > 0 && (
              <>
                <span className="text-gray-300">Tags:</span>
                <div className="flex flex-wrap gap-2">
                  {tags.map((tag) => (
                    <span 
                      key={tag} 
                      className="bg-blue-900 text-blue-100 px-2 py-1 rounded-md text-sm"
                    >
                      {tag}
                    </span>
                  ))}
                </div>
              </>
            )}
          </div>
        </div>
        
        {/* PDF Viewer */}
        <div className="flex-1 bg-gray-900 relative">
          {loading && (
            <div className="absolute inset-0 flex items-center justify-center">
              <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-blue-500"></div>
            </div>
          )}
          
          {error ? (
            <div className="absolute inset-0 flex flex-col items-center justify-center text-white">
              <svg className="w-16 h-16 text-red-500 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
                <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
              </svg>
              <p className="text-xl mb-2">Error Loading PDF</p>
              <p className="text-gray-400 text-center max-w-md">{error}</p>
              <p className="mt-4 text-sm text-gray-500">Try downloading the file instead.</p>
            </div>
          ) : (
            pdfObjectUrl && (
              <iframe 
                src={pdfObjectUrl} 
                className="w-full h-full" 
                title={filename}
              />
            )
          )}
        </div>
      </div>
    </div>
  );
};

export default PDFViewer;